version: '3.8'

services:
  # PostgreSQL Database
  db:
    build:
      context: .
      dockerfile: .docker/Dockerfile.db
    container_name: phoenix-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: phoenix_dashboard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - phoenix-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  api:
    build:
      context: .
      dockerfile: .docker/Dockerfile.backend
    container_name: phoenix-api
    restart: unless-stopped
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: phoenix_dashboard
      DB_USER: postgres
      DB_PASSWORD: postgres
      PORT: 3001
      NODE_ENV: production
      AIRNOW_API_KEY: ${AIRNOW_API_KEY:-your_airnow_api_key_here}
      ETL_INTERVAL_MINUTES: ${ETL_INTERVAL_MINUTES:-15}
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - phoenix-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web Application
  web:
    build:
      context: .
      dockerfile: .docker/Dockerfile.frontend
    container_name: phoenix-web
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3100:3000"
    depends_on:
      - api
    networks:
      - phoenix-network

volumes:
  postgres_data:
    driver: local

networks:
  phoenix-network:
    driver: bridge
